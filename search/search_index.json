{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the LINC Convert Documentation","text":"<p>The center for Large-scale Imaging of Neural Circuits (LINC)  (PIs: Haber, Hillman, Yendiki) is funded by the  NIH BRAIN Initiative CONNECTS program. Its goal is to develop novel technologies for imaging brain connections down to  the microscopic scale, and deploy these technologies to image  cortico-subcortical projections that are relevant to deep brain stimulation for  motor and psychiatric disorders.</p>"},{"location":"#about-this-doc","title":"About this doc","text":"<p>The <code>linc-convert</code> package converts dark-field microscopy, light-sheet microscopy, and polarization sensitive optical coherence tomography files to the OME-Zarr file format.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>LINC Homepage</li> <li>LINC data conversion code on GitHub</li> </ul>"},{"location":"#support","title":"Support","text":"<p>For questions, bug reports, and feature requests, please file an issue on the linc-convert repository.</p>"},{"location":"about/","title":"About this doc","text":""},{"location":"about/#acknowledgements","title":"Acknowledgements","text":"<p>Thank you to the DANDI Archive project for setting up the documentation framework that is utilized here.  See the DANDI Handbook for more information.</p>"},{"location":"about/#license","title":"License","text":"<p>This work is licensed under a Creative Commons Attribution 4.0 International License.</p>"},{"location":"contribute/","title":"Contribute to this documentation","text":"<p>If you find an issue with this documentation please file an issue or submit a pull request on the linc-convert repository.</p> <p>If you would like to contribute to the LINC documentation and render the documentation locally as you make edits, please follow the steps below:</p> <ol> <li>Fork the linc-convert repository and clone it to your computer.</li> <li>Set up a Python environment with the dependencies in the requirements.txt file.</li> <li>Within the Python environment, run <code>mkdocs serve</code>.  This will build the website and start a local webserver (e.g. at http://127.0.0.1:8000) with your documentation.</li> <li>As you continue to edit the markdown files or configuration file, your documentation will be automatically re-built and rendered locally.</li> <li>Commit your changes and submit a pull request.</li> </ol>"},{"location":"start/","title":"Getting started","text":"<p>All data stored on the LINC Data Platform is private to the LINC team. So it should not be made public without written approval from the dataset owner and Anastasia.</p>"},{"location":"upload/","title":"Uploading data to lincbrain.org","text":"<p>Note: The steps below require access to https://lincbrain.org, which is a private repository for LINC project investigators.</p>"},{"location":"upload/#create-a-new-dataset-or-contribute-to-an-existing-dataset","title":"Create a new dataset or contribute to an existing dataset","text":"<p>A dataset refers to a collection of brains that have been processed and imaged in a similar way. It typically contains data from multiple brains or samples, possibly imaged with multiple modalities.</p> <ol> <li>Create a new dataset<ol> <li>Log into the LINC Data Platform.</li> <li>Click on the <code>NEW DATASET</code> button at the top right of the page.</li> <li>Fill out the title, description, and license. (The license option exists only because lincbrain.org is a clone of DANDI. It has no effect here, as lincbrain.org is a private repository.)</li> <li>Click on the <code>REGISTER DATASET</code> button to create the new dataset.</li> </ol> </li> <li>Contribute to an existing dataset<ol> <li>Log into the LINC Data Platform.</li> <li>Browse the existing datasets under the SHARED DATASETS tab.</li> <li>Contact the <code>Owner</code> by email requesting that they add you as an <code>Owner</code> of the dataset.</li> </ol> </li> </ol>"},{"location":"upload/#install-the-dandi-command-line-interface-cli","title":"Install the dandi command-line interface (CLI)","text":"<p>On your local machine, install the dandi CLI package in a python environment:</p> <p><code>pip install dandi</code></p>"},{"location":"upload/#copy-your-lincbrain-api-key","title":"Copy your lincbrain API key","text":"<p>Log into lincbrain.org and click on the button with your initials at the top right of the page. Copy your API key and enter it in the following environment variable on your local machine:</p> <p><code>export DANDI_API_KEY=&lt;EnterYourKeyHere&gt;</code></p>"},{"location":"upload/#download-your-new-empty-dataset-locally","title":"Download your new (empty) dataset locally","text":"<p>You can find the command that you need to run to download a specific dataset by navigating to the dataset landing page on lincbrain.org, clicking on the <code>DOWNLOAD</code> drop-down menu that you'll see at the top right corner of that page, and copying the <code>dandi download ...</code> command that you see when you click on that menu. </p> <p>On your local machine, create a directory that you will use as a staging area for uploading data. Then cd into this directory, and run the download command that you copied above. For example:</p> <pre><code>cd /path/to/my/staging/area\ndandi download https://lincbrain.org/dandiset/101010/draft\n</code></pre> <p>The above example will create a directory called <code>/path/to/my/staging/area/101010</code> with a file called <code>dandiset.yaml</code> in it. Any data files that you want to upload to your new lincbrain.org dataset have to first be saved here, and organized according to the Brain Imaging Data Structure (BIDS).</p>"},{"location":"upload/#organize-your-data","title":"Organize your data","text":"<p>An example of how to organize a dataset that includes dMRI and histology data from two brains is shown below:</p> <pre><code>101010/\n  dataset_description.json\n  participants.tsv\n  rawdata/\n    sub-Ken1/\n      dwi/\n        sub-Ken1_acq-DSI_dwi.bval\n        sub-Ken1_acq-DSI_dwi.bvec\n        sub-Ken1_acq-DSI_dwi.json\n        sub-Ken1_acq-DSI_dwi.nii.gz\n      micr/\n        samples.tsv\n        sub-Ken1_sample-slice0001_photo.json\n        sub-Ken1_sample-slice0001_photo.tif\n        sub-Ken1_sample-slice0001_stain-Nissl_BF.json\n        sub-Ken1_sample-slice0001_stain-Nissl_BF.tif\n        sub-Ken1_sample-slice0002_photo.json\n        sub-Ken1_sample-slice0002_photo.tif\n        sub-Ken1_sample-slice0002_stain-LY_DF.json\n        sub-Ken1_sample-slice0002_stain-LY_DF.tif\n        sub-Ken1_sample-slice0009_photo.json\n        sub-Ken1_sample-slice0009_photo.tif\n        sub-Ken1_sample-slice0009_stain-Nissl_BF.json\n        sub-Ken1_sample-slice0009_stain-Nissl_BF.tif\n        sub-Ken1_sample-slice0010_photo.json\n        sub-Ken1_sample-slice0010_photo.tif\n        sub-Ken1_sample-slice0010_stain-LY_DF.json\n        sub-Ken1_sample-slice0010_stain-LY_DF.tif\n    sub-Ken2/  \n      dwi/\n        sub-Ken2_acq-DSI_dwi.bval\n        sub-Ken2_acq-DSI_dwi.bvec\n        sub-Ken2_acq-DSI_dwi.json\n        sub-Ken2_acq-DSI_dwi.nii.gz\n        sub-Ken2_acq-MulShellMulTE_dwi.bval\n        sub-Ken2_acq-MulShellMulTE_dwi.bvec\n        sub-Ken2_acq-MulShellMulTE_dwi.json\n        sub-Ken2_acq-MulShellMulTE_dwi.nii.gz\n      micr/\n        samples.tsv\n        sub-Ken2_sample-slice0001_photo.json\n        sub-Ken2_sample-slice0001_photo.tif\n        sub-Ken2_sample-slice0001_stain-Nissl_BF.json\n        sub-Ken2_sample-slice0001_stain-Nissl_BF.tif\n        sub-Ken2_sample-slice0002_photo.json\n        sub-Ken2_sample-slice0002_photo.tif\n        sub-Ken2_sample-slice0002_stain-LY_DF.json\n        sub-Ken2_sample-slice0002_stain-LY_DF.tif\n        sub-Ken2_sample-slice0003_photo.json\n        sub-Ken2_sample-slice0003_photo.tif\n        sub-Ken2_sample-slice0003_stain-FR_DF.json\n        sub-Ken2_sample-slice0003_stain-FR_DF.tif\n        sub-Ken2_sample-slice0009_photo.json\n        sub-Ken2_sample-slice0009_photo.tif\n        sub-Ken2_sample-slice0009_stain-Nissl_BF.json\n        sub-Ken2_sample-slice0009_stain-Nissl_BF.tif\n        sub-Ken2_sample-slice0010_photo.json\n        sub-Ken2_sample-slice0010_photo.tif\n        sub-Ken2_sample-slice0010_stain-LY_DF.json\n        sub-Ken2_sample-slice0010_stain-LY_DF.tif\n        sub-Ken2_sample-slice0011_photo.json\n        sub-Ken2_sample-slice0011_photo.tif\n        sub-Ken2_sample-slice0011_stain-FR_DF.json\n        sub-Ken2_sample-slice0011_stain-FR_DF.tif\n</code></pre> <p>The files and subdirectories in this example dataset are described in detail below.</p>"},{"location":"upload/#dataset_descriptionjson","title":"dataset_description.json","text":"<p>This text file is described in detail in the BIDS specification. A minimal <code>dataset_description.json</code> would look like this:</p> <pre><code>{\n    \"Name\": \"Seminal post mortem dMRI and histology dataset from the laboratory of Dr. Barbara Millicent Roberts\",\n    \"BIDSVersion\": \"1.9.0\"\n}\n</code></pre>"},{"location":"upload/#participantstsv","title":"participants.tsv","text":"<p>This text file is described in detail in the BIDS specification. For this dataset, the <code>participants.tsv</code> might look like this:</p> <pre><code>participant_id age sex diagnosis\nsub-Ken1 43 M healthy\nsub-Ken2 61 M hypertension\n</code></pre>"},{"location":"upload/#rawdata","title":"rawdata","text":"<p>This directory contains one subdirectory for each brain, which contain one subdirectory for each modality, which in turn contain raw image data files named according to the BIDS specification.</p>"},{"location":"upload/#dwi","title":"dwi","text":"<p>This directory contains dMRI data files as described in detail in the BIDS specification. </p> <p>In this example the data include images (<code>.nii.gz</code>), b-value tables (<code>.bval</code>), gradient tables (<code>.bvec</code>), and metadata (<code>.json</code>). Data from Ken1 were acquired with a DSI scheme, whereas data from Ken2 were acquired both with a DSI scheme and with a multi-shell, multi-echo scheme.</p>"},{"location":"upload/#micr","title":"micr","text":"<p>This directory contains microscopy data files as described in detail in the BIDS specification.</p> <p>In this example the data include images (<code>.tif</code>) and metadata (<code>.json</code>) from multiple brain sections. For each section there is a blockface photo (<code>_photo</code>) and a histological stain (<code>_stain</code>). Sections from Ken1 and Ken2 were either processed with a Nissl stain and imaged under brightfield microscopy (<code>_BF</code>), or processed for the fluorescent tracer Lucifer Yellow (<code>LY</code>) and imaged under darkfield microscopy (<code>_DF</code>). Additional sections from Ken2 were processed for the fluorescent tracer Fluoro-Ruby (<code>FR</code>) and imaged under darkfield microscopy (<code>_DF</code>).</p>"},{"location":"upload/#high-res-histology-annotation","title":"high-res histology annotation","text":"<p>All annotation files use the following naming scheme: <code>&lt;dataset-name&gt; + _desc-[label] + _suffix.ome.zarr</code> where <code>[label]</code> is replaced by the annotator's initials and <code>_suffix</code> indicates the type of segmentations being annotated. Specifically, when annotating discrete segmentations, use <code>_dseg</code> as the suffix (see the BIDS spec on discrete segmentations).</p> <p>For example, an annotator with an initial JS annotating discrete segments would name the annotation file as <code>000003_sub-MR243_sample-slice0000slice0004_stain-LY_DF_desc-JS_dseg.ome.zarr</code></p> <p>A <code>&lt;matches&gt;.tsv</code> file could be included to map the IDs (integer values) of the discrete segmentations to the custom labels, where <code>&lt;matches&gt;</code> is replaced by the name of the annotation file. It contains a lookup table with the following columns (see the BIDS spec on custom TSV):</p> <pre><code>index  name\n1      Single Fiber\n2      Light Bundle\n3      Moderate Bundle\n...\n</code></pre>"},{"location":"upload/#samplestsv","title":"samples.tsv","text":"<p>This text file is described in detail in the BIDS specification. For Ken1, the <code>samples.tsv</code> would look like this:</p> <pre><code>participant_id sample_id sample_type\nsub-Ken1 sample-slice0001 tissue\nsub-Ken1 sample-slice0002 tissue\nsub-Ken1 sample-slice0009 tissue\nsub-Ken1 sample-slice0010 tissue\n</code></pre>"},{"location":"upload/#upload-your-data","title":"Upload your data","text":"<p>Upload the data from your local machine to lincbrain.org:</p> <pre><code>cd /path/to/my/staging/area/101010\ndandi upload -i linc\n</code></pre> <p>Check the output in your terminal for validation errors. If there were no errors, your data files should now appear on lincbrain.org.</p>"},{"location":"upload/#delete-data-files-or-directories","title":"Delete data files or directories","text":"<p>Individual data files can be deleted on lincbrain.org by clicking on the trashcan icon next to each file. Alternatively, directories or files can be deleted from the command line.</p> <p>The following examples delete a directory named \"horses\" on lincbrain.org:</p> <pre><code>dandi delete -i linc /path/to/my/staging/area/101010/rawdata/Ken2/horses\n</code></pre> <pre><code>dandi delete -i linc \"https://lincbrain.org/dandiset/101010/draft/files?location=rawdata%2Fsub-Ken2%2Fhorses\"\n</code></pre>"},{"location":"webknossos-add-dataset/","title":"Add Webknossos Dataset","text":"<p>The following steps provide instructions for adding assets from the LINC Data Platform to LINC Webknossos.  This process has not been automated as it is often the case that multiple assets are added as layers to a single Webknossos dataset, and a pattern for adding these layers has not yet been established.</p> <ol> <li> <p>Navigate to an asset on the LINC Data Platform, and find the \u201cCopy\u201d button:</p> <p></p> </li> <li> <p>Select the AWS S3 URI \u201cCopy\u201d button:</p> <p></p> </li> <li> <p>The AWS S3 URI is now copied to your clipboard.</p> </li> <li> <p>Proceed to LINC Webknossos.</p> </li> <li> <p>Under the \u201cDatasets\u201d tab, select \u201c+ Add Dataset\u201d:</p> <p></p> </li> <li> <p>Navigate to the \u201cAdd Remote Dataset\u201d tab:</p> <p></p> </li> <li> <p>Paste the AWS S3 URI in the \u201cDataset URL\u201d field and select \u201cAdd Layer\u201d.</p> </li> <li> <p>Add the dataset name that follows the convention below:</p> <p></p> <ul> <li> <p>For a Webknossos dataset with a single layer, the name should match the file naming convention on the LINC Data Platform and add a prefix with the dataset identifier (i.e. <code>&lt;dataset-id&gt;_&lt;filename&gt;.ome.zarr</code>).  For example, the last Zarr asset in the figure below would be named as follows: <code>000003_sub-MN115_sample-slice0000slice0025_stain-LY_DF.ome.zarr</code></p> <p></p> </li> <li> <p>For a Webknossos dataset with multiple layers that are comprised of the histology image and Vaanathi Sundaresan's previously generated annotations, the name will follow the convention for Webknossos annotations and include Vaanathi Sundaresan's initials.</p> </li> </ul> </li> </ol>"}]}